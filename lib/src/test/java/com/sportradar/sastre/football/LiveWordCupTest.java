/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.sportradar.sastre.football;

import com.sportradar.sastre.football.exception.WordCupException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

class LiveWordCupTest {

    LiveWordCup liveWordCup = new LiveWordCup();

    Logger logger = LogManager.getRootLogger();
    @Test
    void shouldCreateMatchOnEmptyBoard() throws Exception {
        int count = liveWordCup.getSummary().size();
        liveWordCup.addMatch("Mexico","Canada");
        logger.debug("Sumary {}", liveWordCup.getSummary());
        assertEquals(liveWordCup.getSummary().size(), count+1);
    }

    @Test
    void shouldAddMatchOnExistingBoard() throws Exception {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.addMatch("Spain","Brazil");
        logger.debug("Sumary {}", liveWordCup.getSummary());
    }

    @Test
    void shouldFailCreateMatchWithWrongTeamName() {
        Exception exception = assertThrows(WordCupException.class, () -> liveWordCup.addMatch("Mexico5", "Canada"));
        assertTrue(exception.getMessage().contains("is not a valid classified country."));
    }

    @Test
    void shouldFailCreateAlreadyCreatedMatch() throws WordCupException{
        liveWordCup.addMatch("Mexico","Canada");
        Exception exception = assertThrows(WordCupException.class, () -> liveWordCup.addMatch("Spain", "Mexico"));
        assertEquals("MEXICO is already playing.", exception.getMessage());
    }

    @Test
    void shouldUpdateMatch() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.updateMatch("Mexico", 2,"Canada", 4);
        logger.debug("Summary {}", liveWordCup.getSummary());
    }

    @Test
    void shouldFailUpdatingNonExistingMatch() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        Exception exception = assertThrows(WordCupException.class, () -> liveWordCup.updateMatch("Spain", 2, "Canada", 4));
        assertEquals("Match not found.", exception.getMessage());
    }

    @Test
    void shouldFailUpdatingMatchWithNegativeScore() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        Exception exception = assertThrows(WordCupException.class,
                () -> liveWordCup.updateMatch("Mexico", -1,"Canada", 4));
        assertEquals("Scores cannot be negative.", exception.getMessage());
    }

    @Test
    void shouldFailUpdateMatchWithDecreasingScore() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.updateMatch("Mexico", 2,"Canada", 4);
        Exception exception = assertThrows(WordCupException.class,
                () -> liveWordCup.updateMatch("Mexico", 1,"Canada", 4));
        assertEquals("Scores cannot decrease.", exception.getMessage());
    }

    @Test
    void shouldFinishMatch() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.updateMatch("Mexico", 2,"Canada", 4);
        liveWordCup.addMatch("Argentina","Spain");
        int count = liveWordCup.getSummary().size();
        logger.debug("Summary {}", liveWordCup.getSummary());
        liveWordCup.finishMatch("Argentina", "Spain");
        assertEquals(liveWordCup.getSummary().size(), count-1);
    }

    @Test
    void shouldFailFinishMatchWithWrongTeamName() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.updateMatch("Mexico", 2,"Canada", 4);
        liveWordCup.addMatch("Argentina","Spain");
        logger.debug("Summary {}", liveWordCup.getSummary());
        Exception exception = assertThrows(WordCupException.class, () -> liveWordCup.finishMatch("Argentina8", "Spain"));
        assertTrue(exception.getMessage().contains("is not a valid classified country."));
    }

    @Test
    void shouldFailFinishMatchWithNonExistingMatch() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.updateMatch("Mexico", 2,"Canada", 4);
        liveWordCup.addMatch("Argentina","Spain");
        logger.debug("Summary {}", liveWordCup.getSummary());
        Exception exception = assertThrows(WordCupException.class, () -> liveWordCup.finishMatch("Canada", "Spain"));
        assertEquals("Match not found.", exception.getMessage());
    }

    @Test
    void shouldShowEmptyScoreBoard(){
        logger.debug("Summary {}", liveWordCup.getSummary());
    }

    @Test
    void shouldShowScoreSortedBoard() throws WordCupException {
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.addMatch("Spain","Brazil");
        liveWordCup.addMatch("Germany","France");
        liveWordCup.addMatch("Uruguay","Italy");
        liveWordCup.addMatch("Argentina","Australia");

        liveWordCup.updateMatch("Mexico",0,"Canada",5);
        liveWordCup.updateMatch("Spain",10,"Brazil",2);
        liveWordCup.updateMatch("Germany",2,"France",2);
        liveWordCup.updateMatch("Uruguay",6,"Italy",6);
        liveWordCup.updateMatch("Argentina",3,"Australia",1);

        logger.debug(liveWordCup.getSortedSummary());
    }

    @Test
    void shouldShowScoreSortedBoard2() throws WordCupException {
        liveWordCup.addMatch("Uruguay","Italy");
        liveWordCup.addMatch("Mexico","Canada");
        liveWordCup.addMatch("Spain","Brazil");
        liveWordCup.addMatch("Germany","France");
        liveWordCup.addMatch("Argentina","Australia");
        liveWordCup.updateMatch("Mexico",0,"Canada",5);
        liveWordCup.updateMatch("Spain",10,"Brazil",2);
        liveWordCup.updateMatch("Germany",2,"France",2);
        liveWordCup.updateMatch("Uruguay",6,"Italy",6);
        liveWordCup.updateMatch("Argentina",3,"Australia",1);
        logger.debug(liveWordCup.getSortedSummary());
    }

}
