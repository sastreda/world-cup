package com.sportradar.sastre.football;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.sportradar.sastre.football.exception.WordCupException;
import com.sportradar.sastre.football.model.Country;
import com.sportradar.sastre.football.model.Match;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

public class LiveWordCup {
    Logger logger = LogManager.getRootLogger();

    public List<Match> getSummary() {
        return summary;
    }

    private List<Match> summary = new ArrayList<>();

    public void addMatch(String homeTeam, String awayTeam) throws WordCupException {
        logger.debug("add new match between {} and {}", homeTeam, awayTeam);
        logger.debug("sumary: {}", summary);
        Country homeCountryTeam = validateAndReturnCountry(homeTeam);
        Country awayCountryTeam = validateAndReturnCountry(awayTeam);
        if (!homeCountryTeam.equals(awayCountryTeam)) {
            summary.add(new Match(homeCountryTeam, awayCountryTeam));
            logger.debug("The game between {} and {} has already started", homeTeam, awayTeam);
        } else {
            throw new WordCupException("one country cannot play against itself");
        }
    }

    public void updateMatch(String homeTeam, int homeScore, String awayTeam, int awayScore) throws WordCupException {
        try {
            Match match = findMatch(homeTeam, awayTeam);
            validateScores(homeScore, awayScore, match);
            match.setHomeScore(homeScore);
            match.setAwayScore(awayScore);
        } catch (NoSuchElementException nsee) {
            throw new WordCupException("Match not found.");
        }
    }

    public void finishMatch(String homeTeam, String awayTeam) throws WordCupException {
        try {
            summary.remove(findMatch(homeTeam, awayTeam));
        } catch (NoSuchElementException nsee) {
            throw new WordCupException("Match not found.");
        }
    }

    /**
     * private void updateMatch(String homeTeam, int homeScore, String awayTeam, int awayScore, boolean fix) {
     * validateTeamName();
     * validateScore();
     * }
     * <p>
     * <p>
     * public List<T> getLiveScoreBoard() {
     * validateTeamName();
     * validateScore();
     * }
     * public List<T> getSummary() {
     * validateTeamName();
     * validateScore();
     * }
     */

    public List<Match> getSortedSummary(){
        return summary.stream().sorted().toList();
    }

    private Country validateAndReturnCountry(String countryString) throws WordCupException {
        Country country = validateCountryStringAndReturnCountry(countryString);
        if (summary.stream().anyMatch(m -> m.getHomeTeam().equals(country) || m.getAwayTeam().equals(country))) {
            throw new WordCupException(country + " is already playing.");
        }
        return country;
    }

    private Match findMatch(String homeTeam, String awayTeam) throws WordCupException {
        Country countryHomeTeam = validateCountryStringAndReturnCountry(homeTeam);
        Country countryAwayTeam = validateCountryStringAndReturnCountry(awayTeam);
        return summary.stream().filter(m -> m.getHomeTeam().equals(countryHomeTeam)
                && m.getAwayTeam().equals(countryAwayTeam)).findFirst().orElseThrow();
    }

    private Country validateCountryStringAndReturnCountry(String countryString) throws WordCupException {
        try {
            return Country.valueOf(countryString.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new WordCupException(countryString + " is not a valid classified country.");
        }
    }

    private void validateScores(int homeScore, int awayScore, Match match) throws WordCupException {
        if (Integer.signum(homeScore) == -1 || Integer.signum(awayScore) == -1) {
            throw new WordCupException("Scores cannot be negative.");
        }
        if (match.getHomeScore() > homeScore || match.getAwayScore() > awayScore) {
            throw new WordCupException("Scores cannot decrease.");
        }
    }
}
